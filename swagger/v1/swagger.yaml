openapi: 3.0.1
info:
  title: API V1
  version: v1
  description: API for managing users, movies, subscriptions, and celebrities
paths:
  "/users":
    post:
      summary: User registration
      tags:
      - Authentication
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  role:
                    type: string
                    enum: [user, supervisor]
                  token:
                    type: string
        '422':
          description: Invalid registration request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                    mobile_number:
                      type: string
                  required:
                  - name
                  - email
                  - password
                  - mobile_number
              required:
              - user
  "/users/sign_in":
    post:
      summary: User login
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              examples:
                success:
                  value:
                    id: 1
                    email: user@example.com
                    role: user
                    token: some_jwt_token_here
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  role:
                    type: string
                    enum: [user, supervisor]
                  token:
                    type: string
        '401':
          description: Unauthorized login attempt
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid email or password
              schema:
                type: object
                properties:
                  error:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                  required:
                  - email
                  - password
              required:
              - user
  "/users/sign_out":
    delete:
      summary: User logout
      tags:
      - Authentication
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signed out successfully."
        '401':
          description: Unauthorized or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token"
  "/api/v1/current_user":
    get:
      summary: Fetch current user
      tags:
      - Users
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User details returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  mobile_number:
                    type: string
                  role:
                    type: string
                    enum: [user, supervisor]
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/update_device_token":
    post:
      summary: Update user device token
      tags:
      - Users
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                device_token:
                  type: string
              required:
              - device_token
      responses:
        '200':
          description: Device token updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Device token updated successfully"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/toggle_notifications":
    post:
      summary: Toggle user notifications
      tags:
      - Users
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notifications_enabled:
                  type: boolean
              required:
              - notifications_enabled
      responses:
        '200':
          description: Notification preference updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification preference updated"
                  notifications_enabled:
                    type: boolean
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/movies":
    get:
      summary: List movies
      tags:
      - Movies
      parameters:
      - name: title
        in: query
        description: Filter movies by title (case-insensitive)
        required: false
        schema:
          type: string
      - name: genre
        in: query
        description: Filter movies by genre
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
          default: 1
      - name: per_page
        in: query
        description: Number of movies per page
        required: false
        schema:
          type: integer
          default: 10
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
        '404':
          description: No movies found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No movies found"
    post:
      summary: Create a new movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  description: Title of the movie
                movie[genre]:
                  type: string
                  description: Genre of the movie
                movie[release_year]:
                  type: integer
                  description: Release year of the movie
                movie[rating]:
                  type: number
                  format: float
                  description: Rating of the movie (0 to 10)
                movie[director]:
                  type: string
                  description: Director of the movie
                movie[duration]:
                  type: integer
                  description: Duration of the movie in minutes
                movie[description]:
                  type: string
                  description: Description of the movie (max 1000 characters)
                movie[main_lead]:
                  type: string
                  description: Main lead actor/actress of the movie
                movie[streaming_platform]:
                  type: string
                  description: Streaming platform (Amazon, Netflix, Hulu, Disney+, HBO)
                  enum: ["Amazon", "Netflix", "Hulu", "Disney+", "HBO"]
                movie[premium]:
                  type: boolean
                  description: Whether the movie is premium
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (JPEG or PNG)
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (JPEG or PNG)
              required:
              - movie[title]
              - movie[genre]
              - movie[release_year]
              - movie[director]
              - movie[duration]
              - movie[description]
              - movie[main_lead]
              - movie[streaming_platform]
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie added successfully"
                  movie:
                    $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden: Researcher access required"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  "/api/v1/movies/{id}":
    get:
      summary: Fetch a movie by ID
      tags:
      - Movies
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '404':
          description: Movie not found or access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found or access denied"
    patch:
      summary: Update a movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie to update
        required: true
        schema:
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  description: Title of the movie
                movie[genre]:
                  type: string
                  description: Genre of the movie
                movie[release_year]:
                  type: integer
                  description: Release year of the movie
                movie[rating]:
                  type: number
                  format: float
                  description: Rating of the movie (0 to 10)
                movie[director]:
                  type: string
                  description: Director of the movie
                movie[duration]:
                  type: integer
                  description: Duration of the movie in minutes
                movie[description]:
                  type: string
                  description: Description of the movie (max 1000 characters)
                movie[main_lead]:
                  type: string
                  description: Main lead actor/actress of the movie
                movie[streaming_platform]:
                  type: string
                  description: Streaming platform (Amazon, Netflix, Hulu, Disney+, HBO)
                  enum: ["Amazon", "Netflix", "Hulu", "Disney+", "HBO"]
                movie[premium]:
                  type: boolean
                  description: Whether the movie is premium
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (JPEG or PNG)
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (JPEG or PNG)
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden: Researcher access required"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
    delete:
      summary: Delete a movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie to delete
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden: Researcher access required"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
  "/api/v1/watchlists":
    get:
      summary: List watchlist movies
      tags:
      - Watchlists
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Watchlist retrieved successfully or empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Watchlist retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
    post:
      summary: Add a movie to watchlist
      tags:
      - Watchlists
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_id:
                  type: integer
                  description: ID of the movie to add to watchlist
              required:
              - movie_id
      responses:
        '201':
          description: Movie added to watchlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie added to watchlist"
                  data:
                    $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Movie not accessible to subscription
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Movie is not accessible to your subscription"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Movie not found"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  "/api/v1/watchlists/{id}":
    delete:
      summary: Remove a movie from watchlist
      tags:
      - Watchlists
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie to remove from watchlist
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie removed from watchlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie removed from watchlist"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '404':
          description: Movie not found in watchlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found in your watchlist"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  "/api/v1/subscriptions":
    post:
      summary: Create a subscription
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_type:
                  type: string
                  enum: ["1_day", "7_days", "1_month"]
              required:
              - plan_type
      responses:
        '200':
          description: Subscription session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                  url:
                    type: string
        '400':
          description: Invalid plan type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid plan type"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/subscriptions/success":
    get:
      summary: Handle successful subscription payment
      tags:
      - Subscriptions
      parameters:
      - name: session_id
        in: query
        description: Stripe checkout session ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Subscription updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription updated successfully"
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscription not found"
  "/api/v1/subscriptions/status":
    get:
      summary: Check subscription status
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Subscription status returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan_type:
                    type: string
                    enum: ["basic", "premium"]
                  message:
                    type: string
                    example: "Your subscription has expired. Downgrading to basic plan."
                    nullable: true
        '404':
          description: No active subscription found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No active subscription found"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/subscriptions":
    get:
      summary: Fetch current user's subscription
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Subscription details returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription:
                    $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/celebrities":
    get:
      summary: List celebrities
      tags:
      - Celebrities
      parameters:
      - name: name
        in: query
        description: Filter celebrities by name (case-insensitive)
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
          default: 1
      - name: per_page
        in: query
        description: Number of celebrities per page
        required: false
        schema:
          type: integer
          default: 10
      responses:
        '200':
          description: List of celebrities
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Celebrity'
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          current_page:
                            type: integer
                          total_pages:
                            type: integer
                          total_count:
                            type: integer
                          per_page:
                            type: integer
        '404':
          description: No celebrities found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "No celebrities found"
    post:
      summary: Create a new celebrity
      tags:
      - Celebrities
      security:
      - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                celebrity[name]:
                  type: string
                  description: Name of the celebrity
                celebrity[birth_date]:
                  type: string
                  format: date
                  description: Birth date of the celebrity (YYYY-MM-DD)
                celebrity[nationality]:
                  type: string
                  description: Nationality of the celebrity
                celebrity[biography]:
                  type: string
                  description: Biography of the celebrity (max 1000 characters)
                celebrity[role]:
                  type: string
                  description: Role of the celebrity
                  enum: ["actor", "director", "writer"]
                celebrity[image]:
                  type: string
                  format: binary
                  description: Image file of the celebrity (JPEG or PNG)
                celebrity[banner]:
                  type: string
                  format: binary
                  description: Banner image file of the celebrity (JPEG or PNG)
                celebrity[movie_ids][]:
                  type: array
                  items:
                    type: integer
                  description: Array of movie IDs to associate with the celebrity (optional). Each ID must be sent as a separate field using `celebrity[movie_ids][]=id` (e.g., `celebrity[movie_ids][]=169`).
              required:
              - celebrity[name]
              - celebrity[birth_date]
              - celebrity[nationality]
              - celebrity[biography]
              - celebrity[role]
              - celebrity[image]
            examples:
              create_with_movie_ids:
                value:
                  celebrity[name]: "Scarlett Johansson"
                  celebrity[birth_date]: "1984-11-22"
                  celebrity[nationality]: "American"
                  celebrity[biography]: "Scarlett Johansson is known for her roles in the Marvel Cinematic Universe, Lost in Translation, and Marriage Story."
                  celebrity[role]: "actor"
                  celebrity[movie_ids][]: 169
              create_with_multiple_movie_ids:
                value:
                  celebrity[name]: "John Doe"
                  celebrity[birth_date]: "1975-01-01"
                  celebrity[nationality]: "American"
                  celebrity[biography]: "Famous actor known for action movies."
                  celebrity[role]: "actor"
                  celebrity[movie_ids][]: 1
                  celebrity[movie_ids][]: 2
            x-example-curl: |
              curl -X POST http://localhost:3000/api/v1/celebrities \
                -H "Authorization: Bearer <your_jwt_token>" \
                -H "Content-Type: multipart/form-data" \
                -F "celebrity[name]=Scarlett Johansson" \
                -F "celebrity[birth_date]=1984-11-22" \
                -F "celebrity[nationality]=American" \
                -F "celebrity[biography]=Scarlett Johansson is known for her roles in the Marvel Cinematic Universe, Lost in Translation, and Marriage Story." \
                -F "celebrity[role]=actor" \
                -F "celebrity[image]=@scarlett.jpg;type=image/jpeg" \
                -F "celebrity[banner]=@scarlett_banner.jpg;type=image/jpeg" \
                -F "celebrity[movie_ids][]=1" \
                -F "celebrity[movie_ids][]=2"
      responses:
        '201':
          description: Celebrity created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Celebrity added successfully"
                  celebrity:
                    $ref: '#/components/schemas/Celebrity'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Forbidden: Supervisor access required"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                invalid_movie_ids:
                  value:
                    errors: ["Invalid movie_ids: 168"]
                invalid_attributes:
                  value:
                    errors: ["Name can't be blank", "Biography is too long (maximum is 1000 characters)", "Role is not a valid role"]
  "/api/v1/celebrities/{id}":
    get:
      summary: Fetch a celebrity by ID
      tags:
      - Celebrities
      parameters:
      - name: id
        in: path
        description: ID of the celebrity
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Celebrity details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Celebrity'
        '404':
          description: Celebrity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Celebrity not found"
    patch:
      summary: Update a celebrity
      tags:
      - Celebrities
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the celebrity to update
        required: true
        schema:
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                celebrity[name]:
                  type: string
                  description: Name of the celebrity
                celebrity[birth_date]:
                  type: string
                  format: date
                  description: Birth date of the celebrity (YYYY-MM-DD)
                celebrity[nationality]:
                  type: string
                  description: Nationality of the celebrity
                celebrity[biography]:
                  type: string
                  description: Biography of the celebrity (max 1000 characters)
                celebrity[role]:
                  type: string
                  description: Role of the celebrity
                  enum: ["actor", "director", "writer"]
                celebrity[image]:
                  type: string
                  format: binary
                  description: Image file of the celebrity (JPEG or PNG)
                celebrity[banner]:
                  type: string
                  format: binary
                  description: Banner image file of the celebrity (JPEG or PNG)
                celebrity[movie_ids][]:
                  type: array
                  items:
                    type: integer
                  description: Array of movie IDs to associate with the celebrity (optional). Each ID must be sent as a separate field using `celebrity[movie_ids][]=id` (e.g., `celebrity[movie_ids][]=169`).
                celebrity[remove_movie_ids][]:
                  type: array
                  items:
                    type: integer
                  description: Array of movie IDs to disassociate from the celebrity (optional). Each ID must be sent as a separate field using `celebrity[remove_movie_ids][]=id` (e.g., `celebrity[remove_movie_ids][]=146`).
            examples:
              update_with_movie_ids:
                value:
                  celebrity[movie_ids][]: 169
                  celebrity[role]: "director"
              update_with_multiple_remove_movie_ids:
                value:
                  celebrity[remove_movie_ids][]: 146
                  celebrity[remove_movie_ids][]: 169
                  celebrity[role]: "writer"
            x-example-curl: |
              curl -X PATCH http://localhost:3000/api/v1/celebrities/15 \
                -H "accept: application/json" \
                -H "Authorization: Bearer <your_jwt_token>" \
                -H "Content-Type: multipart/form-data" \
                -F "celebrity[remove_movie_ids][]=146" \
                -F "celebrity[remove_movie_ids][]=169" \
                -F "celebrity[role]=writer" \
                -F "celebrity[banner]=@new_banner.jpg;type=image/jpeg"
      responses:
        '200':
          description: Celebrity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Celebrity'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Forbidden: Supervisor access required"
        '404':
          description: Celebrity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Celebrity not found"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                invalid_movie_ids:
                  value:
                    errors: ["Invalid movie_ids: 168"]
                duplicate_movie_ids:
                  value:
                    errors: ["Movie IDs already associated: 1"]
                invalid_remove_movie_ids:
                  value:
                    errors: ["Invalid remove_movie_ids: 999"]
                unassociated_remove_movie_ids:
                  value:
                    errors: ["Cannot remove unassociated movie IDs: 4"]
                invalid_attributes:
                  value:
                    errors: ["Biography is too long (maximum is 1000 characters)", "Role is not a valid role"]
    delete:
      summary: Delete a celebrity
      tags:
      - Celebrities
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the celebrity to delete
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Celebrity deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Celebrity deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Forbidden: Supervisor access required"
        '404':
          description: Celebrity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Celebrity not found"
servers:
- url: http://localhost:3000
  description: Local server
- url: https://movie-explorer-ror-aalekh-2ewg.onrender.com
  description: Production server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        genre:
          type: string
        release_year:
          type: integer
        rating:
          type: number
          format: float
        director:
          type: string
        duration:
          type: integer
        description:
          type: string
        main_lead:
          type: string
        streaming_platform:
          type: string
        premium:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        poster_url:
          type: string
          nullable: true
          description: URL of the movie poster (Cloudinary)
        banner_url:
          type: string
          nullable: true
          description: URL of the movie banner (Cloudinary)
      required:
      - id
      - title
      - genre
      - release_year
      - director
      - duration
      - description
      - main_lead
      - streaming_platform
    Subscription:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        plan_type:
          type: string
          enum: ["basic", "premium"]
        status:
          type: string
          enum: ["active", "inactive", "cancelled"]
        stripe_customer_id:
          type: string
          nullable: true
        stripe_subscription_id:
          type: string
          nullable: true
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - user_id
      - plan_type
      - status
    Celebrity:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        age:
          type: integer
          description: Calculated age based on birth_date
        birth_date:
          type: string
          format: date
        nationality:
          type: string
        biography:
          type: string
        role:
          type: string
          enum: ["actor", "director", "writer"]
          description: Role of the celebrity
        image_url:
          type: string
          nullable: true
          description: URL of the celebrity image (Cloudinary)
        banner_url:
          type: string
          nullable: true
          description: URL of the celebrity banner (Cloudinary)
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
          description: List of movies associated with the celebrity
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - name
      - birth_date
      - nationality
      - biography
      - role
      - image_url